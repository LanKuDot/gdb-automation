# The logging file setting
set logging file gdb.log
set logging overwrite on
set logging redirect
set logging on

# Main GDB section
file main.elf
target remote :3333
set $osp = $sp
set $sp = $sp - 16
b main.c:5
c
call RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE)
call RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE)
set ((GPIO_InitTypeDef*)$osp)->GPIO_Pin = GPIO_Pin_3
set ((GPIO_InitTypeDef*)$osp)->GPIO_Mode = GPIO_Mode_IN_FLOATING
call GPIO_Init(GPIOA, $osp)
set ((GPIO_InitTypeDef*)$osp)->GPIO_Pin = GPIO_Pin_2
set ((GPIO_InitTypeDef*)$osp)->GPIO_Speed = GPIO_Speed_50MHz
set ((GPIO_InitTypeDef*)$osp)->GPIO_Mode = GPIO_Mode_AF_PP
call GPIO_Init(GPIOA, $osp)
c
call USART_StructInit((USART_InitTypeDef*)$osp)
call USART_Init(USART2, $osp)
call USART_Cmd(USART2, ENABLE)
c
# Dump the string to binary file
set variable $string_mem=test_string
dump binary memory test-string.bin $string_mem $string_mem+7

# Read from testing string and output to USART
while ( *(char *) $string_mem != '\0' )
call USART_SendData( USART2, *( char * )$string_mem )
set $string_mem = $string_mem + 1
end

# restore the binary file and than output to the GDB session
restore test-string.bin binary $string_mem
printf "%s", $string_mem

# Terminate and Quit gdb
set logging off
quit
